cmake_minimum_required(VERSION 3.10)
project(live2d_ros)

#################################################
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
    )


option(
  CORE_CRL_MD
  "Use Cubism Core that is multithread-specific and DLL-specific version"
  OFF
)


# Set app name.
set(APP_NAME test_1)



# Set directory paths.
set(COCOS2DX_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../CubismNativeSamples-4-r.1/Samples/Cocos2d-x/thirdParty/cocos2d)
set(CMAKE_MODULE_PATH ${COCOS2DX_ROOT_PATH}/cmake/Modules)
set(SDK_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../CubismNativeSamples-4-r.1)
set(CORE_PATH ${SDK_ROOT_PATH}/Core)
set(FRAMEWORK_PATH ${SDK_ROOT_PATH}/Framework)
set(CLASSES_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../CubismNativeSamples-4-r.1/Samples/Cocos2d-x/Demo/Classes)
set(RES_PATH ${SDK_ROOT_PATH}/Samples/Resources)

# Set project.
#project(${APP_NAME})

# Set Visual Studio startup project.
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${APP_NAME})

# Define output directory.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${APP_NAME})

# Set configuration (Release and Debug only).
set(CMAKE_CONFIGURATION_TYPES Debug Release
  CACHE STRING "Configurations" FORCE
)


# Suppress generation of ZERO_CHECK project.
set(CMAKE_SUPPRESS_REGENERATION ON)



# Specify version of compiler.
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -fpic -fexceptions -std=c++11 -Wno-deprecated-declarations -Wno-reorder") 




# Add cocos libs.
include(CocosBuildSet)
add_subdirectory(
  ${COCOS2DX_ROOT_PATH}/cocos
  ${ENGINE_BINARY_PATH}/cocos/core
)

# Record sources, headers, resources...
set(GAME_SOURCE)
set(GAME_HEADER)


# Add cross-platforms source files and header files.
list(APPEND GAME_SOURCE
  ${CLASSES_PATH}/AppDelegate.cpp
  ${CLASSES_PATH}/LAppAllocator.cpp
  ${CLASSES_PATH}/LAppDefine.cpp
  ${CLASSES_PATH}/LAppLive2DManager.cpp
  ${CLASSES_PATH}/LAppModel.cpp
  ${CLASSES_PATH}/LAppPal.cpp
  ${CLASSES_PATH}/LAppSprite.cpp
  ${CLASSES_PATH}/LAppView.cpp
  ${CLASSES_PATH}/SampleScene.cpp
  ${CLASSES_PATH}/TouchManager.cpp
)

list(APPEND GAME_HEADER
  ${CLASSES_PATH}/AppDelegate.h
  ${CLASSES_PATH}/AppMacros.h
  ${CLASSES_PATH}/LAppAllocator.hpp
  ${CLASSES_PATH}/LAppDefine.hpp
  ${CLASSES_PATH}/LAppLive2DManager.hpp
  ${CLASSES_PATH}/LAppModel.hpp
  ${CLASSES_PATH}/LAppPal.hpp
  ${CLASSES_PATH}/LAppSprite.hpp
  ${CLASSES_PATH}/LAppView.hpp
  ${CLASSES_PATH}/SampleScene.h
  ${CLASSES_PATH}/TouchManager.h
)

# Add Cubism Core as static library.
add_library(Live2DCubismCore STATIC IMPORTED)


# Specify Cubism Core library path for each platform and add source files.
list(APPEND GAME_SOURCE
/../../../../CubismNativeSamples-4-r.1/Samples/Cocos2d-x/Demo/proj.linux/src/main.cpp)


set_target_properties(Live2DCubismCore
    PROPERTIES
      IMPORTED_LOCATION
        ${CORE_PATH}/lib/linux/x86_64/libLive2DCubismCore.a
)

# Set core include directory.
set_target_properties(Live2DCubismCore
  PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES ${CORE_PATH}/include
)



# Specify Cubism Framework rendering.
set(FRAMEWORK_SOURCE OpenGL)

# Add Cubism Framework.
add_subdirectory(${FRAMEWORK_PATH} ${SDK_ROOT_PATH}/Framework)

# Add definitions for Cubism Framework.
target_compile_definitions(Framework PUBLIC CSM_TARGET_COCOS)



# Mark app complie info and libs info.
set(all_code_files ${GAME_HEADER} ${GAME_SOURCE} src/test_1.cpp  ${CLASSES_PATH}/AppDelegate.h  ${COCOS2DX_ROOT_PATH}/cocos/cocos2d.h)
#set(MY_SOURCE  ${CLASSES_PATH}/AppDelegate.h)
#set(MY_SOURCE ${COCOS2DX_ROOT_PATH}/cocos/cocos2d.h)
#set(MY_SOURCE src/test_1.cpp)
#set(MY_SOURCE  src/test_1.cpp)
add_executable(${APP_NAME} ${all_code_files})
#add_executable(test_1   src/test_1.cpp)


# Link libraries.
target_link_libraries(${APP_NAME}  ${catkin_LIBRARIES}  )
target_link_libraries(${APP_NAME} Framework Live2DCubismCore cocos2d)

# Specify include directories.
target_include_directories(${APP_NAME} PRIVATE ${CLASSES_PATH})

include_directories(
#include
${catkin_INCLUDE_DIRS}
)



# Mark app resources and add definitions for Cubism Framework.
setup_cocos_app_config(${APP_NAME})

target_compile_definitions(Framework PUBLIC CSM_TARGET_LINUX_GL)




# When this flag is turned on, the renderer will draw for each texture that has LAppModel.
# Otherwise, will draw to the main framebuffer.
# target_compile_definitions(${APP_NAME} PRIVATE USE_MODEL_RENDER_TARGET)

# When this flag is turned on, the renderer will draw to the texture.
# The texture only has LAppView.
# This flag has higher priority than USE_MODEL_RENDER_TARGET.
# target_compile_definitions(${APP_NAME} PRIVATE USE_RENDER_TARGET)




#################################################



## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages



## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
#catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES live2d_ros
#  CATKIN_DEPENDS other_catkin_pkg
#  DEPENDS system_lib
#)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
#include_directories(
#include
#${catkin_INCLUDE_DIRS}
#)

## Declare a C++ library
#add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/live2d_ros.cpp
#)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/live2d_ros_node.cpp)


#set(MY_SOURCE  ${CLASSES_PATH}/AppDelegate.h)
#set(MY_SOURCE ${COCOS2DX_ROOT_PATH}/cocos/cocos2d.h)
#set(MY_SOURCE src/test_1.cpp)
#set(MY_SOURCE  src/test_1.cpp)
#add_executable(test_1 ${MY_SOURCE})
#add_executable(test_1   src/test_1.cpp)


## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#target_link_libraries(test_1
#  ${catkin_LIBRARIES}
#  )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_live2d_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)





